[
["data-viz.html", "DATA VIZ", " DATA VIZ Visualization can be a powerful way to generate insights from data. Creating impactful graphics is not a trivial undertaking, however. There is a science to how the brain consumes visual information. And there is an art to combining elements of graphics in ways that make the data both aesthetically pleasing and informative. It takes practice to develop these skills. This section of the textbook is not about the design of a specific visualization or graphic, but rather the implementation. Once you have an idea for your graphic in your mind, you need a few basic R functions to create the visualization. We will cover these nuts and bolts of building custom graphics, some popular R packages for visualization, and some tricks to take your data viz game to the next level using dynamic graphics and animations. Figure 6.1: The core graphics package allows you to control every element of a visualization. If you would like to start building your data viz muscles, we recommend the following resources as good jumping-off points. Popular blogs that demonstrate the step-by-step process of making a mediocre graphic into a compelling graphic: Makeover Mondays Flowing Data Junk Charts NYT Graphics Blog Help Me Viz Useful introductory textbooks on data visualization: Schwabish, J. A. (2014). An economist’s guide to visualizing data. Journal of Economic Perspectives, 28(1), 209-34. T. Chiasson, D. Gregory, &amp; Contributors (2013). Data + Design: A simple introduction to preparing and visualizing information. Tableau: Which Chart Goes with What Data Inspiration and help with R graphics: R Graph Gallery R Graph Catalog R Graph Compendium ggplot2 Geoms Gallery "],
["the-plot-function.html", "Chapter 7 The plot() Function 7.1 Key Concepts 7.2 plot() Arguments 7.3 Titles 7.4 Type of Plot 7.5 Shape of Points 7.6 Size of Points 7.7 Colors 7.8 Looking Ahead", " Chapter 7 The plot() Function Figure 7.1: The core graphics package allows you to control every element of a visualization. 7.1 Key Concepts Mastering a few arguments in the plot() function allows for a lot of customization. plot( x=fertilizer, # data, if x is omitted then uses 1:length(y) y=corn.height, xlim=c(0,100), # min and max value of axes ylim=c(200,350), frame.plot=FALSE, # draw a box around the data? col=&quot;steel blue&quot;, # color of the points type=&quot;b&quot;, # points=&quot;p&quot;, lines=&quot;l&quot;, both=&quot;b&quot;, or none=&quot;n&quot; pch=19, # shape of points to plot cex=2, # size of points main=&quot;Plot Title&quot;, # title of your plot xlab=&quot;Label for X&quot;, # axes labels ylab=&quot;Label for Y&quot;, cex.lab=1.5 # aspect ratio for axes labels ) 7.2 plot() Arguments This lecture is a brief introduction to the plot() function in R, the work horse of the graphics package. We will introduce the flexibility of the fully-customizable graphics engine in R through the demonstration of some useful arguments. To demonstrate these arguments we will use a simple dataset from a hypothetical farming experiment that examines the relationship between levels of new fertilizer under development and the height of the corn. To identify the optimal dosage of fertilizer to use, the experiment applies different levels to separate fields of corn, then measures the average final corn height at each dosage. The fields are scattered across three farms, and “moisture” represents the average Volumetric Water Content of the soil in each field. You can load it as follows: source( &quot;https://raw.githubusercontent.com/DS4PS/Data-Science-Class/master/DATA/corn_stalks.R&quot; ) fertilizer corn.height moisture farm 1 228 0.62 A 2 232 0.33 A 3 264 0.59 B 4 239 0.36 A 5 271 0.66 A 6 252 0.4 C The default plot() function requires an x-variable and y-variable and will create a scatterplot, adding axes and a title: plot( x=fertilizer, y=corn.height ) Ok, so let’s improve upon this a bit. You can use the following arguments to customize the plot: 7.3 Titles We can add better labels and a title with xlab=, ylab=, and main=. plot( x=fertilizer, y=corn.height, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot; ) We can also change their size with cex.lab= to control the size of the axes labels, and cex.main= to control the size of the title. Note that all of the cex arguments are aspect ratios, meaning that the default value of 1 represents 100% and all other argument values are in relation to this default. A value of 2 means to increase the title to 200% of the size, an argument of 0.5 shrinks the title to half the original size. plot( x=fertilizer, y=corn.height, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;cex.lab=2&quot;, cex.lab=2, # double the size of the axis labels col.lab=&quot;steelblue&quot; # change color of axis labels ) 7.4 Type of Plot We can plot points, lines, or some combination of lines and points using the type= argument: “l” for lines “p” for points “b” for both points and lines “o” plots lines over points “n” for no lines or points plot( x=fertilizer, y=corn.height, type=&quot;p&quot;, main=&#39;type=&quot;p&quot;&#39;, cex.main=2, xlab=&quot;&quot;, ylab=&quot;&quot;, col.axis=&quot;gray60&quot;, frame.plot=F ) 7.5 Shape of Points The argument pch determines the shape of the plot points. The numeric values 0 to 25 represent different default shapes. We can also use any number, letter, or symbol as a plotting shape. Note that shapes 0 to 14 are hollow, 15 to 20 are solid, and 21 to 25 can also plot a background color specified by the bg= argument. plot( x=fertilizer, y=corn.height, frame.plot=FALSE, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;pch=23&quot;, cex.main=1.5, pch=23, col=&quot;red&quot;, bg=&quot;green&quot; ) 7.6 Size of Points We change the size of points using the cex= argument (pronounced “chex”). Similar to the title cex, it is an aspect ratio so cex=2 increases the size of the plotting points to 200% of the original, and cex=0.5 scales the size down to half of the original size. plot( x=fertilizer, y=corn.height, col=&quot;darkgoldenrod2&quot;, pch=19, cex=2, # scale points to 200% normal size xlab=&quot;&quot;, ylab=&quot;&quot;, las=1, main=&quot;cex=2&quot;, cex.main=2, frame.plot=FALSE ) The cex= argument is also useful for incorporating a third numeric variable into the analysis. For example, perhaps we want to include the average moisture levels of the soil for each field. When we use a numeric vector like this with the cex= argument, instead of a single constant, the plot will adjust the size of observation based upon its measured moisture level. Since moisture values are between 0 and 1, I have scaled them by 3 to ensure the points are large enough to see. plot( x=fertilizer, y=corn.height, col=&quot;darkgoldenrod2&quot;, cex=3*moisture, pch=19, frame.plot=F, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot; ) 7.7 Colors The argument col= determines the color of plot points. To see a list of preset options check out: List of default named colors in R plot( x=fertilizer, y=corn.height, col=&quot;darkgoldenrod2&quot;, pch=19, cex=2, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot;, frame.plot=FALSE ) In the example above we specified a single color for all of our corn heights. If we want to incorporate a third categorical variable in our analysis, we can use a factor in our dataset as the value we pass to the col= argument. For example, perhaps we want to indicate which farm each field belongs to in the graph. plot( x=fertilizer, y=corn.height, pch=19, cex=2, col=farm, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot;, frame.plot=FALSE ) Note that “farms” has to be a factor in order to use it in the col= argument. In this example, the farms have labels of “A” to “C”. levels( farm ) ### [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; You might be curious how R selected the colors for the three farms. The palette() function will print the default values that R uses for categorical variables: palette() ### [1] &quot;black&quot; &quot;red&quot; &quot;green3&quot; &quot;blue&quot; &quot;cyan&quot; &quot;magenta&quot; &quot;yellow&quot; ### [8] &quot;gray&quot; You can see that the first three are the colors used in the graph above. Since there are only 8 default values, if your categorical variable has more than 8 levels it will start to recycle colors. Perhaps you don’t like the default values. You can select your own by passing color names to the palette() function as follows: palette( c(&quot;forestgreen&quot;,&quot;darkorange1&quot;,&quot;darkorchid&quot;) ) plot( x=fertilizer, y=corn.height, pch=18, cex=3, col=farm, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot;, frame.plot=FALSE ) 7.8 Looking Ahead In the next section, we will add some lines, points, and text to the plot. We can add lines to highlight trends (a regression is just the average of Y at each level of X). plot( x=fertilizer, y=corn.height, xlab=&quot;Fertilizer (mg)&quot;, ylab=&quot;Corn Height (cm)&quot;, main=&quot;Relationship Between Fertilizer Intensity and Corn Growth&quot;, pch=19, col=&quot;gray&quot;, cex=2, bty=&quot;n&quot; ) lines( lowess( fertilizer, corn.height ), col=&quot;darkgoldenrod2&quot;, lwd=4 ) In order to add narrative to your graphs, you can add points and text. The points() function operates with basically the same parameters as the plot() function. The text() function uses the same X and Y coordinates, but you also have to add an argument for the text that you want added to the plot. Let’s highlight the tallest corn stalk as an example. tallest.x &lt;- fertilizer[ which.max( corn.height ) ] tallest.y &lt;- corn.height[ which.max( corn.height ) ] points( x=tallest.x, y=tallest.y, cex=3, lwd=1.5, col=&quot;firebrick4&quot; ) text( x=tallest.x, y=tallest.y, labels=&quot;Tallest Stalk&quot;, pos=3, offset=1, col=&quot;firebrick4&quot; ) "]
]
