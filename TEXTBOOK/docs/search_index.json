[
["functions.html", "Chapter 2 Functions 2.1 Key Concepts 2.2 Computer Programs as Recipes 2.3 Example Function 2.4 Default Argument Values", " Chapter 2 Functions 2.1 Key Concepts Figure 2.1: Anatomy of a function Figure 2.2: Assignment of output values After reading this chapter you should be able to define the following: function argument object assignment 2.2 Computer Programs as Recipes Computer programs are powerful because they allow us to codify recipes for complex tasks, save them, share them, and build upon them. In the simplest form, a computer program is like a recipe. It is a set of steps completed in order with the goal of 2.3 Example Function As you get started in R you will be working with existing functions, not writing your own. It is, however, constructive to see how one is created. This example demonstrates the use of a mortgage calculator that will take a loan size, term, and interest rate and return a monthly payment. calcMortgage &lt;- function( principal, years, APR ) { months &lt;- years * 12 int.rate &lt;- APR / 12 # amortization formula monthly.payment &lt;- ( principal * int.rate ) / (1 - (1 + int.rate)^(-months) ) monthly.payment &lt;- round( monthly.payment, 2 ) return( monthly.payment ) } Letâ€™s then see what the payments will be for a: $100,000 loan 30-year mortgage 5% annual interest rate calcMortgage( principal=100000, years=30, APR=0.05 ) #&gt; [1] 536.82 2.4 Default Argument Values Note that the loan function needs all three of the input values in order to calculate the loan size. If we were to omit one required value, we would get an error. calcMortgage( principal=100000 ) # Error in calcMortgage(APR = 0.05, principal = 1e+05): # argument &quot;years&quot; is missing, with no default When creating functions, we might have a good idea of typical use cases. If true, we can try to guess at reasonable user parameters. For example, perhaps we are working at a bank where most of the customers take out 30-year mortgages, and interest rates have been stable at 5 percent. We can set these as default values when we create the function. calcMortgage &lt;- function( principal, years=30, APR=0.05 ) { months &lt;- years * 12 int.rate &lt;- APR / 12 # amortization formula monthly.payment &lt;- ( principal * int.rate ) / (1 - (1 + int.rate)^(-months) ) monthly.payment &lt;- round( monthly.payment, 2 ) return( monthly.payment ) } We can now run the function while omitting arguments, as long as they have defaults assigned. calcMortgage( principal=100000 ) #&gt; [1] 536.82 "]
]
